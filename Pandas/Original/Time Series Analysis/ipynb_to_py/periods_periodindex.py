# -*- coding: utf-8 -*-
"""Periods_PeriodIndex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cDIb8avSJDYII2eqDe56Rc_CZvC4H5Uj
"""

# Period and PeriodIndex
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

y = pd.Period("2019")

# Start time
y.start_time

# End time 
y.end_time

# we can also create another year by just adding 1.
y1 = y+1
y1.end_time

# we can also change frequency by Months, days ,Hours,
# for months
m = pd.Period("2016-01", freq="M")
m

m.start_time

m.end_time

m+1   # it gives the feb month.

# for days
d = pd.Period("2016-11-05", freq = "D")
d

d.start_time

d.end_time

d+1 # gives the next day!

h = pd.Period("2016-11-2 14:00", freq = "H")
h

h.start_time

h.end_time

h+1 # gives next hour!

# now Quaters (4 quaters in a year)
q = pd.Period("2017", freq = "Q-Jan") # in freq write when your quater ends

q.start_time

q.end_time # 31st jan is the ending of the quater

# now period range function
pr = pd.period_range(start = "2011", end = "2015", freq = "Q")
pr

# for epypt period ends in january
pr_egypt = pd.period_range(start = "2011", end = "2015", freq = "Q-Jan")
pr_egypt

pr[16].start_time

# now creating a series
s = pd.Series(np.random.randn(len(pr)), index=pr)
s

# now we can retrive a quater by its year
s["2011"]

# now we can retrive a quater by its yearS
s["2011":"2013"]

# converting into the quater into dates
dt = pr.to_timestamp()
dt

# converting the timestamp into index
per = dt.to_period()
per

# import the dataset for exercise
ds = pd.read_csv("wmt.csv")
ds

ds = ds.T
ds

ds.index = pd.PeriodIndex(ds.index, freq = "Q-Jan")
ds.index

ds["Start date"] = ds.index.map(lambda x: x.start_time)
ds["End date"] = ds.index.map(lambda x: str((x.end_time)).split(" ")[0])
ds["End date"] = pd.to_datetime(ds["End date"])
type(ds["End date"][0])
ds